name: Publish and deploy to VPS

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ secrets.REPO_OWNER }}/griffon
  DB_HOST: ${{secrets.DB_HOST}}
  VITE_API_ADDRESS: ${{secrets.VITE_API_ADDRESS}} 
  YARN_ENABLE_IMMUTABLE_INSTALLS: false
jobs:
  install_dependencies:
    name: Install dependencies
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Enable Corepack
        run: corepack enable

      - name: Setup Yarn
        run: corepack prepare yarn@4.6.0 --activate
      
      - name: Run Yarn
        run: yarn install
      
      - uses: actions/cache@v4
        with:
          key: node_modules
          path: |
            node_modules
            packages
            apps/web/node_modules
            apps/api/node_modules
  push_backend:
    needs: [install_dependencies]
    name: Backend image
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Enable Corepack
        run: corepack enable
  
      - name: Setup Yarn
        run: corepack prepare yarn@4.6.0 --activate
        
      - uses: actions/cache/restore@v4
        with:
          key: node_modules
          path: |
            node_modules
            packages
            apps/web/node_modules
            apps/api/node_modules
   
      - name: login
        run: |
          echo ${{ secrets.GH_SECRET }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: build front
        run: yarn build:api

      - name: Build and push
        run: |
          docker build  --build-arg DB_HOST=${{secrets.DB_HOST}} --build-arg JWT_SECRET=${{secrets.JWT_SECRET}} --build-arg PORT=${{secrets.PORT}}  --build-arg DB_PORT=${{secrets.DB_PORT}} --build-arg DB_USERNAME=${{secrets.DB_USERNAME}} --build-arg DB_PASSWORD=${{secrets.DB_PASSWORD}} --build-arg DB_NAME=${{secrets.DB_NAME}} --build-arg JWT_EXPIRATION=${{secrets.JWT_EXPIRATION}}  -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest ./apps/api
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest

  push_frontend:
    needs: [install_dependencies]
    name: Frontend image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Yarn
        run: corepack prepare yarn@4.6.0 --activate

      - uses: actions/cache/restore@v4
        with:
          key: node_modules
          path: |
            node_modules
            packages
            apps/web/node_modules
            apps/api/node_modules
  
      - name: build front
        run: yarn build:web
        
      - name: login
        run: |
          echo ${{ secrets.GH_SECRET }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push
        run: |
          docker build  -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest ./apps/web
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
  deploy:
    needs: [push_backend, push_frontend]
    name: deploy image
    runs-on: ubuntu-24.04

    steps:
      - name: connect and pull
        run: |
          sshpass -v -e ssh  ${{ secrets.SSH_USER}}@${{ secrets.SSH_HOST }} 'cd root && docker compose up -d && exit'
        env:
          SSHPASS: ${{ secrets.SSH_PASS }} 
